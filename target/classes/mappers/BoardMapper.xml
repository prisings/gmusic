<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ncs.BoardMapper">


<!-- SQL 쿼리문에서 비교연산자 사용하는 경우  
XML에서는  <,>등 비교연산자의 경우 XML규칙상 에러 나기때문에,
이기호를 연산자로 인식하도록 하기 위해서는 SQL문을 CDATA로 묶어 주어야 한다.
<![CDATA[ SELECT * FROM table WHERE id > 1 ]]> 
-->

<!-- SearchCriteria PageList  
=> searchType 별 검색 조건문 만들기
=> Sql , include 태그 : 반복되는 쿼리 묶기

=> title Like '%#{keyword}%' 
=> '%' + #{keyword} + '%'
=> CONCAT(i1,i2) , ||
=> CONCAT : 두개의 문자열 합침 
			3개의 문자열을 합치려면 아래처럼 함수를 함수로 감싸줘야 한다. 
			( MySql은 3개 가능 )
			
=> 만약 keyword 를 선택하지 않은 경우 라면
   select id from board where id like '%%' ;
   -> 무조건(전체검색) 과 동일			
--> 
<sql id="search">
  <if test="keyword != null">
  	<bind name="keyVal" value="'%'+keyword+'%'"/>
  </if>	
  <choose>
  	<when test="searchType=='t'.toString()">
  		and title Like #{keyVal} )
  		<!-- and title Like  CONCAT('%',CONCAT(#{keyword},'%')) -->
  	</when>
  	<when test="searchType=='c'.toString()">
  		and content Like #{keyVal} )
  	</when>
  	<when test="searchType=='w'.toString()">
  		and id Like  '%' || #{keyword} || '%')
  	</when>
  	<when test="searchType=='tc'.toString()">
  		and title   Like  '%' || #{keyword} || '%' 
  		or  content Like  '%' || #{keyword} || '%')
  	</when>
  	<when test="searchType=='cw'.toString()">
  		and content Like  '%' || #{keyword} || '%' 
  		or  id      Like  '%' || #{keyword} || '%')
  	</when>
  	<when test="searchType=='tcw'.toString()">
  		and title   Like  '%' || #{keyword} || '%'
  		or  content Like  '%' || #{keyword} || '%' 
  		or  id      Like  '%' || #{keyword} || '%')
  	</when>
  	<otherwise>)</otherwise> 
  </choose>
</sql>

<select id="searchRowCount" resultType="int">
<![CDATA[ 	
	select count(*) from board where ( seq > 0 ]]>
	<!-- 조건 id : search -->
	<include refid="search"></include>
</select>

<select id="searchBList" resultType="vo.BoardVO">
<![CDATA[
  select seq,title,id,regdate,cnt,root,step,indent,rnum from    
  (select b.* , ROW_NUMBER() OVER(order by root desc, step asc) rnum from board b 
   where seq > 0 ]]> 
   <include refid="search"></include>
  where rnum between #{sno} and #{eno}
</select>

<!-- PageList -->
<select id="totalRowCount" resultType="int">
	select count(*) from board
</select>
<select id="pageList" resultType="vo.BoardVO">
  select seq,title,id,regdate,cnt,root,step,indent,rnum  
  from (select b.* , ROW_NUMBER() OVER(order by root desc, step asc) rnum from board b ) 
  where rnum between #{sno} and #{eno}
</select>

<!-- 
** Check BoardList 
=> select * from board where id in('admin','banana','apple') order by root desc, step asc
=> collection : list 또는 array Type 의 매개변수 (vo에 정의된 변수 사용)	
	   item : collection 의  데이터 를 1건씩 전달 받으며 위의 구문을 완성함. 	
	   index : 필요시 사용,  0 부터 시작 (0,1,2...) 
               <foreach ...index="index"..>   
                      ...... "${index}" : index 값 사용하기 
                             사용하지 않는경우 아래처럼 표시해도되고, 생략해도됨.
               <foreach ...... index="" open="(" close=")" separator=","> 
-->
<select id="checkselectList" resultType="vo.BoardVO">
	select * from board where id in
	<foreach collection="check" item="it" open="(" close=")" separator=",">
	#{it}
	</foreach>
	order by root desc, step asc
</select>

<!-- 
** Ajax id BoardList -->
<select id="idbList" resultType="vo.BoardVO">
	 select * from board where id=#{id} order by root desc, step asc
</select>

<!-- 
** reply insert
 => 답글 등록과 step증가 -->
<update id="stepUpdate">
	UPDATE board set step=step+1 WHERE root=#{root} and step >= #{step}
</update> 
<insert id="rinsert">
	INSERT into board values((select nvl(max(seq),0)+1 from board), 
	#{title},#{id},#{content},sysdate,0,#{root},#{step},#{indent})
</insert>

<!-- ******************************* -->
<select id="selectList" resultType="vo.BoardVO">
	 select * from board order by root desc, step asc
</select>

<select id="selectOne" resultType="vo.BoardVO">
	 select * from board where seq=#{seq}
</select>

<!-- selectKey Test 
=> https://deeplify.dev/back-end/spring/select-key
=> AutoNumbering 을 편리하게 할 수 있도록 지원
=> DB작업중 먼저 어떤 키값을 가져와서 증가시켜서 입력하거나 혹은 입력후에 증가된 키값을 가져올 필요가 있을때다.
   selectKey를 이용하면 별도의 쿼리로직 없이 해당 메소드에서 일괄처리할 수가 있음.
   keyProperty: selectKey구문의 결과가 셋팅될 대상 프로퍼티.
   resultType: 결과의 타입.
   order: BEFORE 또는 AFTER
          BEFORE로 설정하면 키를 먼저 조회하고 그 값을 keyProperty 에 셋팅한 뒤 insert 구문실행.
          AFTER로 설정하면 insert 구문을 실행한 뒤 selectKey 구문 실행.
          오라클에서는 insert구문 내부에서 일관된 호출형태로 처리한다.
   statementType: STATEMENT, PREPARED 또는 CALLABLE중 하나 선택가능.
          마이바티스에게 Statement, PreparedStatement 또는 CallableStatement를 사용하게 한다.
          디폴트는 PREPARED.
-->
<insert id="insert">
	<selectKey keyProperty="seq" resultType="int" order="BEFORE">
		SELECT NVL(MAX(seq),0)+1 FROM board
	</selectKey>
	INSERT INTO board VALUES(
		#{seq},
		#{title}, #{id}, #{content}, sysdate, 0,
		#{seq},0,0)
</insert>

<!-- <insert id="insert">
	INSERT into board values((select nvl(max(seq),0)+1 from board),
	#{title},#{id},#{content},sysdate,0,
	(select nvl(max(seq),0)+1 from board),0,0)
</insert> -->

<update id="update">
	UPDATE board set title=#{title}, content=#{content} WHERE seq=#{seq} 
</update>

<delete id="delete">
	DELETE from board
	<if test="seq==root">where root=#{seq}</if> 
	<!-- 원글삭제 : 동일한 root를 가진 글들은 모두 삭제 -->
	<if test="seq!=root">where seq=#{seq}</if> 
	<!-- 답글삭제 -->
</delete>

<!-- Controller 에서 cnt 증가후 service 시행 
	=> UPDATE board set cnt=cnt+1 WHERE seq=#{seq} 
-->
<update id="countUp">
	UPDATE board set cnt=#{cnt} WHERE seq=#{seq} 
</update>

</mapper>  